[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "adaptive-claude-agents"
version = "0.4.3-beta"
description = "Auto-generate project-specific Claude Code subagents that adapt to your development phase"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Sawano Lab"},
]
keywords = ["claude", "ai", "subagents", "development", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.14",
    "mypy>=1.8.0",
    "black>=24.1.0",
    "coverage[toml]>=7.4.0",
    "ipython>=8.20.0",
    "types-PyYAML>=6.0.12.12",
]

[project.urls]
Homepage = "https://github.com/SawanoLab/adaptive-claude-agents"
Documentation = "https://github.com/SawanoLab/adaptive-claude-agents#readme"
Repository = "https://github.com/SawanoLab/adaptive-claude-agents"
Issues = "https://github.com/SawanoLab/adaptive-claude-agents/issues"
Discussions = "https://github.com/SawanoLab/adaptive-claude-agents/discussions"

# ============================================================================
# pytest Configuration
# ============================================================================

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Add markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as performance benchmarks",
    "integration: marks tests as end-to-end integration tests",
]

# Coverage settings
addopts = [
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "-ra",
]

# Ignore warnings from dependencies
filterwarnings = [
    "ignore::DeprecationWarning",
]

# ============================================================================
# Coverage Configuration
# ============================================================================

[tool.coverage.run]
branch = true
source = ["skills"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# Ruff Configuration (Linter)
# ============================================================================

[tool.ruff]
# Target Python 3.9+
target-version = "py39"

# Line length
line-length = 100

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

# Exclude patterns
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

# ============================================================================
# Black Configuration (Formatter)
# ============================================================================

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | \.egg-info
)/
'''

# ============================================================================
# Mypy Configuration (Type Checker)
# ============================================================================

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "yaml"
ignore_missing_imports = true
